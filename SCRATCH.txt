NEXT:
- Match
	- initialises Round with attrs
	- initialises with a score of 0 for each fighter
	- plays a round 3 times
		- after each round, takes round.scores and adds to each fighter
		- after last round returns the {winner:, loser:} 


TODO:
- Personality of player (aggressive, passive etc). So that replies to intervies appear in correct way in paper
- Gym class 
	- where player can train (it will make player.punch and return hit, miss and options message)
	- where player can read paper
- Fighter should implement fight_health (that for now will be a constant, 3)
- in a match, when punch is true for opponent, they always hit:
	- maybe they should only be successful a set number of times, depending on rank (KISS)
- grudge: another attribute that randomlt develops after a fight. The next trash talk will take this attribute into account
 - maybe we offer a player a faux choice - how they respond to a fighter post-fight always results in a grudge, but chooses the flavor of grudge (disrespect/something comes out about the coach/pandering to fans)
 - stuff to lookup for trash talk and highlights
	- age
	- no_of_fights
	- last_fight_result
	- last_fight_MO
	- streak
 

	DONT WORRY:
	- about converting a csv for ruby game - just feed game ahash with limited lines. Save working out converting csv for Lua!

	Overall goal:
	- Meet the most devious...your roster

	GOAL MARK I:
	- Basic title sceen
	- Intro to game with Gregg
		- Become champ
		- 3 losses and you are out
	- Gym screen
		- Train
		- Check newspaper
			- Check rankings
			- Check next fight stats
			- Special "Breaks into the top 3!"
		- Fight
	- Pre-fight presser - "Imma smash 'im"
	- Fight
	 - player hits >= fighter hits, then player wins
	 - player loses, then get 1 loss and rematch *chance for trash talk!
	 - player gets three losses, then game over 
	- Gym screen

	DONE:
	- a constant roll_die with a default 6 value -- DONE
		- replace existing roll_die in Match -- DONE
	- create method punch in Fighter class -- DONE
		- uses roll_die const, using total rank (eg 10) and if >= self rank -- DONE
		- returns true or false -- DONE
	- create player class -- DONE
		- initialize with target -- DONE
		- inherit from Fighter class -- DONE
		- override punch method -- DONE
			- do target stuff and return true/false -- DONE
	- rewrite run_punch_encounter -- DONE
		- remove target from match -- DONE
		- run fighter.punch instead of target.punch -- DONE
		- return fighter if fighter.punch is true other return nothing -- DONE
	- archive current Round (and spec) -- DONE
	- Rewrite Commentary to Commentator -- DONE
		- initialises with lines
		- delete existing methods
		- build_up method
			- create line for normal and line for special build_up. Each should use interpolation
			- receives fighter_a, fighter_b and :special, default false
			- if called with nothing, returns normal line
			- if called with true, returns special line
		- outcome method
			- create line for hit, miss and normal. Each should use interpolation
			- receives fighter_a, fighter_b and an :hit, deafult nil
			- if :hit nil then return normal line
			- if :hit true return hit line
			- if :hit false return miss line
	- in Fighter create methods for roll for activity and roll for punch - put in constants for now (1/3 and 1/3) -- DONE
	- Amend Target
		- remove train method (this can be in Gym class - it will check to see if punch was success or not and return a "hit" or "miss" message, plus options)
	- Amend Player:
		- initialize with Target
		- Player.punch delegates to Target.punch
	- Amend Fighter
		- rename punch_successful? to punch
	- Create new class Round
		- initialises with number_of_slots, 30 (comes from a constant)
		- initialises with Player
		- initialises with Opponent
		- initialises with Commentator
		- flow is:
			- pressor = round.check_for_pressor #both fighters roll, whoever rolls highest and above threshold
			- if pressor
				- commentator.build_up(special: false)
				- if round.check_for_intention_to_punch
					- commentator.build_up(special: true)
					- if fighter.punch
						- commnetator.outcome(hit:true)
					- else
						- commnetator.outcome(hit:false)
				- else
					- commentator.outcome(hit: nil)